name: duk_push_heapptr

proto: |
  duk_idx_t duk_push_heapptr(duk_context *ctx, void *ptr);

stack: |
  [ ... ] -> [ ... obj! ]

summary: |
  <p>Push a Duktape heap allocated object into the value stack based on a borrowed
  void pointer reference.
  The argument <code>ptr</code> must be obtained using
  <code><a href="#duk_get_heapptr">duk_get_heapptr()</a></code> (or its variants)
  and must have been reachable for Duktape garbage collection up to this call.
  If <code>ptr</code> is <code>NULL</code>, <code>undefined</code> is pushed.</p>

  <div class="note">
  It's not safe to rely on finalizer calls to indicate that an object has become
  unreachable.  When an object becomes unreachable, it is queued to be finalized,
  and it takes some time before the finalization happens.  In this state it's no
  longer safe to call duk_push_heapptr() for the object waiting for finalization.
  The application must ensure on its own that the object is reachable all the way
  between duk_get_heapptr() and duk_push_heapptr().
  </div>

example: |
  void *ptr;
  duk_idx_t idx;

  /* 'ptr' originally obtained using duk_get_heapptr() earlier, with the original
   * value reachable by Duktape GC all the way to here:
   */

  idx = duk_push_heapptr(ctx, ptr);

tags:
  - stack
  - object
  - borrowed

seealso:
  - duk_get_heapptr
  - duk_require_heapptr

introduced: 1.1.0
