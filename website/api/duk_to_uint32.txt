=proto
unsigned int duk_to_uint32(duk_context *ctx, int index);

=stack
[ ... val! ... ] -> [ ... ToUint32(val)! ... ]

=summary
<p>Replace the value at <code>index</code> with an Ecmascript
<a href="http://www.ecma-international.org/ecma-262/5.1/#sec-9.6">ToUint32()</a>
coerced value.  Returns the coerced value.  If <code>index</code> is invalid, throws
an error.</p>

<p>Custom type coercion:</p>
<ul>
<li>Buffer: <code>0</code> for zero-size buffer, <code>1</code> otherwise</li>
<li>Pointer: <code>0</code> for <code>NULL</code> pointer, <code>1</code> otherwise</li>
</ul>

<div class="note">
The result of <code>ToUint32()</code> is an unsigned 32-bit integer and is assumed to
fit into the C <code>unsigned int</code> type.  If the C type is smaller, the value will be
coerced by the C compiler (<code>double</code> to <code>unsigned int</code>).
</div>

=example
printf("ToUint32(): %u\n", duk_to_uint32(ctx, -3));

=tags
stack

=fixme
Apply the duk_get_int() coercion to the result just in case?  It would clamp
output values to INT_MIN and INT_MAX.  This is not very relevant because if
int is smaller than 32 bits, everything will break anyway.
