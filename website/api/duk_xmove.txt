=proto
void duk_xmove(duk_context *to_ctx, duk_context *from_ctx, duk_idx_t to_idx, duk_idx_t from_idx, duk_idx_t count);

=stack
[ ... val1(from_idx)! ...! valN! ... ] -> [ ... ]  (on source stack, from_ctx)
[ ... ] -> [ ... val1(to_idx)! ...! valN! ... ]  (on target stack, to_ctx)

=summary
<p>Remove <code>count</code> arguments starting at <code>from_idx</code> on the source
stack (<code>from_ctx</code>) and insert them into the the target stack
(<code>to_ctx</code>) at <code>to_idx</code>.  The caller must ensure that the target
stack has enough allocated space with e.g.
<code><a href="#duk_require_stack>duk_require_stack()</a></code>.</p>

<p>A common need is to move elements from the top of a source stack to the top
of a target stack.  There is a separate helper for that:
<code><a href="#duk_xmove_top">duk_xmove_top()</a></code>.  If you use
<code>duk_xmove()</code>, you must be careful with the indices in this case,
because zero refers to the stack bottom (not the stack top):</p>
<pre class="c-code">
duk_xmove(to_ctx,
          from_ctx,
          duk_get_top(to_ctx),  /* target start index is stack top, i.e. append */
          duk_get_top(from_ctx) - count,  /* if we know count>0, could use -count here */
          count);
</pre>

<p>Also note that you can also operate on a single stack by setting <code>from_ctx</code>
and <code>to_ctx</code> to the same value.  In this case the <code>from_idx</code> and
<code>to_idx</code> are resolved to absolute positions on the value stack before any
stack changes have been made.  Overlapping moves are allowed, and they behave as
extensions of single element moves.  For instance:</p>
<pre>
  duk_xmove(ctx, ctx, -5, 3, 3);

  Initial stack:

          (-5)
    0 1 2 3 4 5 6 7 8
  [ A B C D E F G H I ]
        <--->
            <--->
        ^   ^
        |   `-- to_idx
        `------ from_idx

  Elements are first conceptually removed without disturbing indices:

    0 1 2 3 4 5 6 7 8
  [ A B . . . F G H I ]

  The inserted elements would now be inserted at:

    0 1 2 3 4 5 6 7 8
  [ A B . . . F G H I ]
            C D E       <-- insert point

  To make room, F and G are shifted downwards:

  [ A B F G . . . H I ]

  and the insertion is then made:

  [ A B F G C D E H I ]

  In other words, the source elements (C D E) are moved to the target
  position (as computed before any stack changes) and other elements
  are moved as necessary to make space.
</pre>

=example
/* A Duktape/C function which executes a given function in a new thread.
 */
static duk_ret_t call_in_thread(duk_context *ctx) {
    duk_idx_t nargs;
    duk_context *new_ctx;

    /* Arguments: func, arg1, ... argN. */
    nargs = duk_get_top(ctx);
    if (nargs < 1) {
        return DUK_RET_TYPE_ERROR;  /* missing func argument */
    }

    /* Create a new context. */
    duk_push_thread();
    new_ctx = duk_require_context(ctx, -1);

    /* Move arguments to the new context.  Note that we need to extend
     * the target stack allocation explicitly.
     */
    duk_require_stack(new_ctx, nargs);
    duk_xmove(ctx, new_ctx, nargs);

    /* Call the function; new_ctx is now: [ func arg1 ... argN ]. */
    duk_call(new_ctx, nargs - 1);

    /* Return the function call result by copying it to the original stack. */
    duk_xmove(new_ctx, ctx, 1);
    return 1;
}

=tags
stack
omit

=fixme
Unfinished.
